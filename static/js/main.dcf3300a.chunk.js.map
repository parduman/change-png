{"version":3,"sources":["components/main.js","App.js","reportWebVitals.js","index.js"],"names":["mainComponent","props","uploadImage","event","name","target","files","imageDetails","state","url","URL","createObjectURL","setState","convertImage","imageName","console","log","canvas","document","createElement","height","width","ctx","getContext","filter","blurLevel","image","Image","src","onload","drawImage","updatedUrl","toDataURL","mergeImage","backgroundImage","overlayImage","mergeImages","x","y","then","b64","imageDetailsChange","e","fieldName","value","this","slice","class","style","display","justifyContent","for","id","type","onChange","onClick","href","download","alt","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dcf3300a.chunk.js","sourcesContent":["import React from 'react';\nimport mergeImages from 'merge-images';\n\nclass mainComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            mergeImage: \"\",\n            backgroundImage: { url: \"\", updatedUrl: \"\", x: 0, y: 0, height: 300, width: 300, blurLevel: 0},\n            overlayImage: { url: \"\", updatedUrl: \"\", x: 0, y: 0, height: 300, width: 300, blurLevel: 0},\n        }\n    }\n\n    uploadImage = (event, name) => {\n        if (event.target.files[0]) {\n            let imageDetails = this.state[name];\n            imageDetails.url = URL.createObjectURL(event.target.files[0]);\n            this.setState({\n                [name]: imageDetails\n            }, this.convertImage(name))\n        }\n    }\n\n    convertImage = (imageName) => {\n        console.log('updating', imageName)\n        let imageDetails = this.state[imageName];\n        const canvas = document.createElement('canvas');\n        canvas.height = imageDetails.height;\n        canvas.width = imageDetails.width;\n        let ctx = canvas.getContext('2d');\n        ctx.filter = `blur(${imageDetails.blurLevel}px)`;\n        let image = new Image();\n        image.src = imageDetails.url;\n        image.onload = () => {\n            ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n            imageDetails.updatedUrl = canvas.toDataURL(\"image/png\");\n            this.setState({\n                [imageName]: imageDetails\n            })\n        }\n    }\n\n    mergeImage = () => {\n        let { backgroundImage, overlayImage } = this.state;\n        if (backgroundImage.updatedUrl && overlayImage.updatedUrl) {\n            mergeImages([\n                { src: backgroundImage.updatedUrl, x: backgroundImage.x, y: backgroundImage.y },\n                { src: overlayImage.updatedUrl, x: overlayImage.x, y: overlayImage.y }\n            ]).then(b64 => {\n                this.setState({\n                    mergeImage: b64\n                })\n            });\n        }\n    }\n\n    imageDetailsChange = (e, fieldName) => {\n        let { name, value } = e.target;\n        let imageDetails = this.state[name]\n        imageDetails[fieldName] = +value\n        this.setState({\n            [name]: imageDetails\n        }, this.convertImage(name))\n\n    }\n\n    render() {\n        console.log(this.state, this.state.backgroundImage.updatedUrl.slice(0, 21));\n        return (\n            <div>\n                <div>\n                    <h1 class=\"display-1 my-2 mx-4\">Image Editor</h1>\n                </div>\n                <div class='mt-4'>\n                    <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n                        <div style={{ width: '30%' }}>\n                            <div style={{ height: '2vw' }}>\n                                <label for=\"Imageinput\" class={this.state.overlayImage.url ? \"text-success\" : \"text-primary\"}>Select Image</label>\n                                <input id=\"Imageinput\" class=\"invisible\" type=\"file\" onChange={(e) => { this.uploadImage(e, 'overlayImage') }} />\n                            </div>\n                            {this.state.overlayImage.url ? <div>\n                                <div class=\"row\">\n                                    <div class=\"col\">\n                                        <label>X-Position</label>\n                                        <input type='number' class=\"form-control\" name='overlayImage' value={this.state.overlayImage.x} onChange={(e) => this.imageDetailsChange(e, 'x')} />\n                                    </div>\n                                    <div class=\"col\">\n                                        <label>y-Position</label>\n                                        <input type='number' class=\"form-control\" name='overlayImage' value={this.state.overlayImage.y} onChange={(e) => this.imageDetailsChange(e, 'y')} />\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col\">\n                                        <label>Height</label>\n                                        <input type='number' class=\"form-control\" name='overlayImage' value={this.state.overlayImage.height} onChange={(e) => this.imageDetailsChange(e, 'height')} />\n                                    </div>\n                                    <div class=\"col\">\n                                        <label>Width</label>\n                                        <input type='number' class=\"form-control\" name='overlayImage' value={this.state.overlayImage.width} onChange={(e) => this.imageDetailsChange(e, 'width')} />\n                                    </div>\n                                </div>\n                            </div> : \"\"}\n                        </div>\n                        <div style={{ width: '30%' }}>\n                            <div style={{ height: '2vw' }}>\n                                <label for=\"Imageinput2\" class={this.state.backgroundImage.url ? \"text-success\" : \"text-primary\"}>Select Background Image</label>\n                                <input id=\"Imageinput2\" class=\"invisible\" type=\"file\" onChange={(e) => { this.uploadImage(e, 'backgroundImage') }} />\n                            </div>\n                            {this.state.backgroundImage.url ? <div>\n                                <div class=\"row\">\n                                    <div class=\"col\">\n                                        <label>X-Position</label>\n                                        <input type='number' class=\"form-control\" name='backgroundImage' value={this.state.backgroundImage.x} onChange={(e) => this.imageDetailsChange(e, 'x')} />\n                                    </div>\n                                    <div class=\"col\">\n                                        <label>y-Position</label>\n                                        <input type='number' class=\"form-control\" name='backgroundImage' value={this.state.backgroundImage.y} onChange={(e) => this.imageDetailsChange(e, 'y')} />\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col\">\n                                        <label>Height</label>\n                                        <input type='number' class=\"form-control\" name='backgroundImage' value={this.state.backgroundImage.height} onChange={(e) => this.imageDetailsChange(e, 'height')} />\n                                    </div>\n                                    <div class=\"col\">\n                                        <label>Width</label>\n                                        <input type='number' class=\"form-control\" name='backgroundImage' value={this.state.backgroundImage.width} onChange={(e) => this.imageDetailsChange(e, 'width')} />\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col\">\n                                        <label>Blur Value</label>\n                                        <input type='number' class=\"form-control\" name='backgroundImage' value={this.state.backgroundImage.blurLevel} onChange={(e) => this.imageDetailsChange(e, 'blurLevel')} />\n                                    </div>\n                                </div>\n                            </div>\n                                : \"\"\n                            }\n                        </div>\n                        <div style={{ width: '25%' }}>\n                            {this.state.backgroundImage.updatedUrl.slice(0, 21) === \"data:image/png;base64\" && this.state.overlayImage.updatedUrl.slice(0, 21) === \"data:image/png;base64\" ? <button type=\"button\" class=\"btn btn-success\" onClick={(e) => { this.mergeImage() }}>Apply Changes</button> : \"\"}\n                        </div>\n                    </div>\n                </div>\n                {this.state.mergeImage ? <div class=\"text-center\">\n                    <a href={this.state.mergeImage} download><img class=\"mt-3\" id=\"123\" alt=\"aa\" src={this.state.mergeImage}></img></a>\n                </div> : \"\"}\n            </div>\n        );\n    }\n\n}\n\nexport default mainComponent;","import React from 'react';\nimport MainComponent from './components/main.js'\n\nclass App extends React.Component {\n  render(){\n    return (\n      <MainComponent />\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}